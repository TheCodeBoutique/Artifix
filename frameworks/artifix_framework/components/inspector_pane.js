// ==========================================================================
// Project:   SproutCore - JavaScript Application Framework
// Copyright: ©2006-2011 Strobe Inc. and contributors.
//            Portions ©2008-2011 Apple Inc. All rights reserved.
//            Portions ©2011-2012 The Code Boutique LLC. All rights reserved.
// License:   Licensed under MIT license (see license.js)
// ==========================================================================

sc_require('components/min_button');
sc_require('components/close_button');

/** @class

    Most SproutCore applications need a pane that can be repositioned by selecting, dragging, then releasing.  Furthermore,
 the pane needs to be appendable and removable from the dom on the fly.  On the top of the pane there is a minimize_button, close_button, and a title.
 Both buttons come preconfigured.  But for the title you will need to pass a value when you append the pane to a view.

 ART.InspectorPane.create({
 layout: { width: 400, height: 200, centerX: 0, centerY: 0 },
 childViews: ["closeButton", "title", "minButton"],
 value: 'my awesome pane',
 }).append();

 This will cause your panel to display.

 @extends SC.Pane
 @author Chad Eubanks
 */
ART.InspectorPane = SC.Pane.extend(
    /** @scope SC.PanelPane.prototype */ {

  /**
   @type Array
   @default ['sc-panel']
   @see SC.View#classNames
   */

  value: '',

  classNames: 'inspector_pane'.w(),
  childViews: ["closeButton", "title", "minButton"],

  closeButton: ART.CloseButtonView.design({
    layout: { top: 5, left: 10, height: 10, width: 10 },
  }),

  title: SC.LabelView.design({
    classNames:['pane-bar-title'],
    layout: { top: 3, height: 25, left: 20, right: 20 },
    valueBinding: '.parentView.value',
    textAlign: SC.ALIGN_CENTER,
  }),

  minButton: ART.MinButtonView.design({
    layout: { top: 3, right: 10, height: 8, width: 21 },
  }),

  /**
   This is generated by localizing the title property if necessary.

   @type String
   @observes 'title'
   @observes 'localize'
   */
  displayTitle: function() {
    var ret = this.get('title');
    return (ret && this.get('localize')) ? SC.String.loc(ret) : (ret || '');
  }.property('title', 'localize').cacheable(),


  mouseDown: function(evt) {
    var f = this.get('frame');
    this._mouseOffsetX = f ? (f.x - evt.pageX) : 0;
    this._mouseOffsetY = f ? (f.y - evt.pageY) : 0;
    return YES;
  },

  /** @private */
  mouseDragged: function(evt) {
    if (!this.isAnchored) {
      this.set('layout', { width: this.layout.width, height: this.layout.height, left: this._mouseOffsetX + evt.pageX, top: this._mouseOffsetY + evt.pageY });
      this.updateLayout();
    }
    return YES;
  },

  /** @private */
  touchStart: function(evt) {
    return this.mouseDown(evt);
  },

  /** @private */
  touchesDragged: function(evt) {
    return this.mouseDragged(evt);
  }

})

